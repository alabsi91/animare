---
import { Card, CardGrid } from '@astrojs/starlight/components';
const Title = 'animare';
---

<h1>Welcome to</h1>
<div class='container not-content'>
  <h1 class='title'>
    {[...Title].map(c => <span class='letter'>{c}</span>)}
  </h1>
  <div class='slider-container'>
    <button class='play-pause'>
      <svg class='play-svg' xmlns='http://www.w3.org/2000/svg' height='24px' viewBox='0 0 100 100' width='24px'>
        <path d='M20,20 L35,20 L35,80 L20,80 Z M65,20 L80,20 L80,80 L65,80 Z'></path>
      </svg>
    </button>
    <input class='animare-slider' type='range' min='0' max='1' step='0.001' value='0' />
  </div>
</div>

<div class='hero-buttons not-content'>
  <a href='/animare/installation' class='cssbuttons-io-button'>
    Get started
    <div class='icon'>
      <svg height='24' width='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>
        <path d='M16.172 11l-5.364-5.364 1.414-1.414L20 12l-7.778 7.778-1.414-1.414L16.172 13H4v-2z' fill='currentColor'></path>
      </svg>
    </div>
  </a>
</div>

<CardGrid>
  <Card title='Light' icon='seti:salesforce'>Advanced animation library for modern JavaScript.</Card>
  <Card title='Modern' icon='seti:crystal_embedded'>Based on `requestAnimationFrame`</Card>
</CardGrid>

<script>
  import { TRANSITION_BEFORE_PREPARATION } from 'astro:transitions/client';
  import animare from 'animare';
  import { ease, lerp, vecToRGB } from 'animare/plugins';

  import type { AnimationGroupOptions, GroupOnUpdateCallback, Vec3Array } from 'animare';

  const letters = document.querySelectorAll<HTMLSpanElement>('.letter');
  const title = document.querySelector<HTMLElement>('.title');
  const slider = document.querySelector<HTMLInputElement>('.animare-slider')!;
  const playPauseButton = document.querySelector<HTMLButtonElement>('.play-pause')!;
  const playSvg = playPauseButton.querySelector<SVGSVGElement>('.play-svg path')!;

  // force reload on transition
  document.addEventListener(TRANSITION_BEFORE_PREPARATION, e => {
    if (e.to.pathname === '/animare/') {
      e.navigationType === 'traverse' ? location.reload() : e.preventDefault();
    }
  });

  const togglePlayPauseIcon = (play: boolean) => {
    if (play) {
      playSvg.style.d = 'path("M20,20 L80,50 L20,80 L20,80 Z M65,20 L80,20 L80,20 L65,20 Z")';
      return;
    }

    playSvg.style.d = 'path("M20,20 L35,20 L35,80 L20,80 Z M65,20 L80,20 L80,80 L65,80 Z")';
  };

  const alternate = (t: number) => (t <= 0.5 ? t : 1 - t) * 2;

  const colors: { [K: string]: Vec3Array } = {
    white: [255, 255, 255],
    orange: [244, 96, 54],
  };

  const animations: AnimationGroupOptions = {
    to: Array(letters.length + 1).fill(1),
    offset: i => (i === 0 ? 0 : i === letters.length ? -200 : -800),
    duration: 1000,
    autoPlay: false,
  };

  const onUpdate: GroupOnUpdateCallback = (info, tl) => {
    // timeline is started
    if (tl.isFirstFrame) togglePlayPauseIcon(false);

    // update progress slider
    slider.value = `${tl.progress}`;

    // loop over animations values except last one
    for (let i = 0; i < info.length - 1; i++) {
      const letter = letters[i];
      const t = info[i].value;

      const x = lerp(i >= info.length / 2 ? -400 : 400, 0, ease.in.wobble(2)(t)),
        y = lerp(i >= info.length / 2 ? 200 : -200, 0, ease.out.elastic(t)),
        z = lerp(400, 0, ease.out.back()(t)),
        rotate = lerp(i % 2 === 0 ? 90 : -90, 0, ease.in.wobble(6)(t)),
        scale = lerp(0, 1.2, ease.in.wobble(4)(t));

      letter.style.scale = `${scale}`;
      letter.style.translate = `${x}px ${y}px ${z}px`;
      letter.style.rotate = `${rotate}deg`;

      letter.style.opacity = `${t}`;
      letter.style.filter = `blur(${lerp(4, 0, t)}px)`;
      letter.style.color = vecToRGB(lerp(colors.orange, colors.white, t));
    }

    // last animation
    const a = info[info.length - 1];
    const t = a.value;
    if (title) title.style.letterSpacing = `${lerp(15, 0, ease.spring({ damping: 7, duration: 1400 })(t))}px`;

    // apply only when the last animation is playing to prevent conflict with previous animations
    if (a.isPlaying || a.isFinished) {
      for (let i = 0; i < letters.length; i++) {
        const letter = letters[i];
        letter.style.scale = `${lerp(1.2, 1, ease.in.wobble(i % 2 === 0 ? 4 : 3)(t))}`;
        letter.style.color = vecToRGB(lerp(colors.white, colors.orange, ease.out.back(4)(t)));
        letter.style.filter = `blur(${lerp(0, i % 2 === 0 ? 3 : 2, alternate(t))}px)`;
      }
    }

    // timeline is completed
    if (tl.isFinished) togglePlayPauseIcon(true);
  };

  const timeline = animare.group(animations, onUpdate);

  function inputRangeHandler(e: Event) {
    const target = e.target as HTMLInputElement;
    const value = parseFloat(target.value);
    timeline.seek(timeline.timelineInfo.duration * value);
    if (!timeline.timelineInfo.isPlaying) timeline.playOneFrame();
  }

  function playPauseHandler() {
    if (timeline.timelineInfo.isPlaying) {
      timeline.pause();
      togglePlayPauseIcon(true);
      return;
    }

    const time = timeline.timelineInfo.isFinished ? 0 : timeline.timelineInfo.duration * parseFloat(slider.value);
    timeline.play(time);
  }

  playPauseButton.addEventListener('click', playPauseHandler);
  slider.addEventListener('input', inputRangeHandler);

  setTimeout(() => timeline.play(), 500);
</script>

<style>
  .container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .title {
    font-size: 4rem;
    perspective: 300px;
    pointer-events: none;
    user-select: none;
    white-space: nowrap;
  }

  .letter {
    display: inline-block;
    pointer-events: none;
    user-select: none;
    opacity: 0;
  }

  .slider-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    align-self: stretch;
    margin-top: 2rem;
  }

  .slider-container button {
    background-color: transparent;
    border: none;
    display: flex;
    flex-direction: row;
    align-items: center;
    cursor: pointer;
  }

  .slider-container button svg {
    fill: var(--secondary);
  }

  .slider-container button path {
    transition: all 0.3s ease-in-out;
  }

  .animare-slider {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    cursor: pointer;

    accent-color: var(--secondary);
    width: 100%;
    max-width: 500px;
  }

  /***** Track Styles *****/
  /***** Chrome, Safari, Opera, and Edge Chromium *****/
  .animare-slider::-webkit-slider-runnable-track {
    background: #a1a1a1;
    height: 0.1rem;
    border-radius: 0.5rem;
  }

  /******** Firefox ********/
  .animare-slider::-moz-range-track {
    background: #a1a1a1;
    height: 0.1rem;
    border-radius: 0.5rem;
  }

  /***** Thumb Styles *****/
  /***** Chrome, Safari, Opera, and Edge Chromium *****/
  .animare-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    margin-top: -0.5rem;
    background: var(--secondary);
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
    cursor: pointer;
  }

  /******** Firefox ********/
  .animare-slider::-moz-range-thumb {
    border: none;
    border-radius: 0;
    background: var(--secondary);
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
    cursor: pointer;
  }

  :global(.page) {
    overflow: clip;
  }

  /* Remove title */
  :global(main > .content-panel:first-child) {
    display: none;
  }

  .hero-buttons {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    margin-block: 4rem;
  }

  .cssbuttons-io-button {
    text-decoration: none;
    background: #5b3a86;
    color: #fff;
    font-family: inherit;
    padding: 0.1em;
    padding-left: 1.8em;
    font-weight: 500;
    border-radius: 0.6em;
    border: none;
    letter-spacing: 0.05em;
    display: flex;
    align-items: center;
    box-shadow: inset 0 0 1.6em -0.6em #5b3a86;
    overflow: hidden;
    position: relative;
    height: 2.8em;
    padding-right: 3.3em;
    cursor: pointer;
  }

  .cssbuttons-io-button .icon {
    background: white;
    margin-left: 1em;
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 2.2em;
    width: 2.2em;
    border-radius: 0.5em;
    box-shadow: 0.1em 0.1em 0.6em 0.2em #5b3a86;
    right: 0.3em;
    transition: all 0.3s;
  }

  .cssbuttons-io-button:hover .icon {
    width: calc(100% - 0.6em);
  }

  .cssbuttons-io-button .icon svg {
    width: 1.1em;
    transition: transform 0.3s;
    color: #5b3a86;
  }

  .cssbuttons-io-button:hover .icon svg {
    transform: translateX(0.1em);
  }

  .cssbuttons-io-button:active .icon {
    transform: scale(0.95);
  }
</style>
